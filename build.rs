
use std::env;
use std::fs;
use std::path::Path;
use std::io::Write;
use anyhow::Result;
use glam::Vec2;

fn main() -> Result<()> {
    let mesh_path = "meshes.bin";
    let mut mesh_file = fs::File::create(Path::new(env::var("OUT_DIR")?.as_str()).join(mesh_path))?;
    let mut module_file = fs::File::create("./src/meshes.rs")?;
    writeln!(module_file, "//This file is autogenerated")?;
    writeln!(module_file, "pub const VERTEX_DATA: &[u8] = include_bytes!(concat!(env!(\"OUT_DIR\"), \"/{}\"));", mesh_path)?;

    let mut index = 0;

    {
        let start = index;
        let from_id = |i: u32|{
            let (sin, cos) = f32::sin_cos(std::f32::consts::FRAC_PI_3 * i as f32);
            Vec2::new(sin, cos)
        };

        for i in 0u32..4 {
            mesh_file.write_all(bytemuck::bytes_of(&from_id(0)))?;
            mesh_file.write_all(bytemuck::bytes_of(&from_id(i + 1)))?;
            mesh_file.write_all(bytemuck::bytes_of(&from_id(i + 2)))?;
            index += 3;
        }

        writeln!(module_file, "pub const HEXAGON: std::ops::Range<i32> = {}..{};", start, index)?;
    }


    println!("cargo:rerun-if-changed=build.rs");
    Ok(())
}